name: example_ae_12oct2022
task: srgan
device: cuda # cpu cuda
use_amp: True
random_seed: 0 # not works now 
cudnn_benchmark: True
cudnn_deterministic: False

# gpu_ids: [0] will be released in next versions

### Transforms: ###
#["Compose", "ToTensor", "ToCVImage",
#"Normalize", "Resize", "Scale", "CenterCrop", "Pad",
#"Lambda", "RandomApply", "RandomOrder", "RandomChoice", "RandomCrop",
#"RandomHorizontalFlip", "RandomVerticalFlip", "RandomResizedCrop", "RandomSizedCrop",
#"FiveCrop", "TenCrop", "LinearTransformation", "ColorJitter",
#"RandomRotation", "RandomAffine", "RandomAffine6",
#"Grayscale", "RandomGrayscale", "RandomErasing",
#"RandomPerspective", "Cutout",
#"RandomGaussianNoise", "RandomPoissonNoise", "RandomSPNoise",
#"RandomSpeckleNoise", "RandomCompression",
#"RandomAverageBlur", "RandomBilateralBlur", "RandomBoxBlur",
#"RandomGaussianBlur", "RandomMedianBlur", "RandomMotionBlur",
#"RandomComplexMotionBlur", "RandomAnIsoBlur", "AlignedDownsample",
#"RandomSincBlur",
#"BayerDitherNoise", "FSDitherNoise", "AverageBWDitherNoise", "BayerBWDitherNoise",
#"BinBWDitherNoise", "FSBWDitherNoise", "RandomBWDitherNoise",
#"FilterColorBalance", "FilterUnsharp", "CLAHE",
#"FilterMaxRGB", "RandomQuantize", "RandomQuantizeSOM", "SimpleQuantize",
#"FilterCanny", "ApplyKernel", "RandomGamma", "Superpixels",
#"RandomChromaticAberration", "RandomCameraNoise",
#]

datasets:
  dataset_1:
    name: hq
    path_dir: /home/magorokhoov/homeNN/Datasets/mounted/FFHQ
    batch_size: 4
    shuffle: True
    num_workers: 4

    processing:
      loader: cv # cv, numpy (not implemented)
      mode: rgb # rgb, rgba, bgr, bgra, gray, gray3dim, unchanged (not implemented)

      # if string -> config path
      # if dict -> config pipeline
      transformation: ./options/transforms/flips.yml
        #RandomHorizontalFlip: { p: 0.5 }
        #RandomVerticalFlip: { p: 0.5 }
      augmentation: 
        RandomOrder:
          transforms:
            RandomGaussianNoise: { p: 0.6, var_limit: [5.0, 30.0], prob_color: 0.5 }
            RandomGaussianBlur: { p: 0.4, kernel_size: 7, sigmaX: [1, 4], sigmaY: [1, 4]}
            #RandomErasing: { p: 0.5, scale: [0.02, 0.33], ratio: [0.3, 3.3] }

networks:
  gen:
    arch: stupid_gen
    in_nc: 3
    mid_nc: 32
    out_nc: 3
    #inner_nc: 256 # 32x8

    act_type: gelu
    norm_type: group
    norm_groups: 4

    optimizer:
      name: adamw
      weight_decay: 0.001
      beta1: 0.9
      beta2: 0.99
      lr: 1e-3

    scheduler:
      scheme: multistep
      #milestones: []
      milestones_rel: [0.05, 0.2, 0.4, 0.6, 0.8]
      gamma: 0.5

  dis:
    arch: stupid_discriminator
    in_nc: 3
    mid_nc: 32
  
    act_type: gelu
    norm_type: group
    norm_groups: 4

    optimizer:
      name: adamw
      weight_decay: 0.001
      beta1: 0.9
      beta2: 0.99
      lr: 1e-3

    scheduler:
      scheme: multistep
      #milestones: []
      milestones_rel: [0.05, 0.2, 0.4, 0.6, 0.8]
      gamma: 0.5

lossers:
  gen:
    losser_type: image
    losses:
      pixel-l1:
        loss_type: pixel
        criterion: { criterion_type: l1}
        weight: 1.0
      #tv:
      #  loss_type: tv 
      #  criterion: {gamma: 1.0}
      #  weight: 0.0001
      #fea:
      #  loss_type: feature
      #  criterion: { criterion_type: l1 }
      #  network: 'vgg19'
      #  layers: {'conv3_2': 0.5, 'conv4_2': 0.5}
      #  weight: 1.0

  gan:
    losser_type: gan # TODO: code new losser_type for GAN
    relativistic: True
    
    real_val: 1.0 # (0.9, 1.0)
    fake_val: 0.0 # (0.0, 0.1)

    loss_func: 
      loss_type: gan
      criterion: { criterion_type: BCEWithLogitsLoss}
      weight: 1.0

    weight_gen: 1e-2
    weight_dis_fake: 1.0
    weight_dis_real: 1.0
    

metrics:
  psnr_0:
    metric_type: psnr

weights:
  gen:
    path: '../experiments/example2_ae_11oct2022/models/gen.pth'
    strict: False
  dis:
    path: '../experiments/example2_ae_11oct2022/models/dis.pth'
    strict: False

experiment:
  root: "../experiments/"
  saving_freq: 20000
  display_freq: 200

  n_iters: 60000

  log_print_freq: 500
  save_log_file: True
